<testExecutions version="1">
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/games/lobby/route.test.ts">
<testCase name="POST api/games/lobby should return &apos;OK&apos; when trying to create a lobby" duration="13" />
<testCase name="DELETE api/games/lobby should delete an existing game lobby" duration="4" />
<testCase name="PUT api/games/lobby should return &quot;OK&quot; when trying to create a lobby" duration="2">
<failure message="Error"><![CDATA[TypeError: Cannot destructure property &apos;_id&apos; of &apos;((cov_1ru5jbfkag(...).s[30]++) , (intermediate value))&apos; as it is undefined.
    at _id (/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/games/lobby/route.ts:59:13)
    at Object.&lt;anonymous&gt; (/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/games/lobby/route.test.ts:90:26)]]></failure>
</testCase>
</file>
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/users/[username]/developer/route.test.ts">
<testCase name="GET function api/user/[username]/developer returns 200 when file exists" duration="2" />
</file>
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/developer/route.test.ts">
<testCase name="POST /api/developer should return existing token if regenerate is false" duration="2" />
<testCase name="POST /api/developer should generate a new token if regenerate is true" duration="6" />
<testCase name="POST /api/developer should return 404 if user is not found" duration="1" />
</file>
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/users/[username]/route.test.ts">
<testCase name="api/users/[username] PUT function returns 200 when user exists" duration="1" />
<testCase name="api/users/[username] PUT function should return 400 when username is already in use" duration="1" />
<testCase name="api/users/[username] PUT function should return 400 when email is already in use" duration="1" />
<testCase name="api/users/[username] PUT function should return 400 when old password is not provided" duration="1" />
<testCase name="api/users/[username] PUT function should return 400 when passwords do not match" duration="1" />
<testCase name="api/users/[username] PUT function should return 400 when new friend is not provided" duration="1" />
<testCase name="api/users/[username] PUT function should return 400 when new friend is not found" duration="2" />
</file>
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/games/lobby/[lobbyId]/route.test.ts">
<testCase name="GET Game Lobby returns lobby details if lobby is found and user is logged in" duration="1" />
</file>
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/users/register/route.test.ts">
<testCase name="User Registration returns error if username is in use" duration="2" />
<testCase name="User Registration returns error if email is in use" duration="1" />
<testCase name="User Registration registers user successfully" duration="1" />
</file>
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/games/[gameid]/route.test.ts">
<testCase name="GET API Endpoint should return a game when it exists" duration="2" />
<testCase name="GET API Endpoint should return an error when the game is not found" duration="1" />
</file>
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/releases/route.test.ts">
<testCase name="Release Functions gets releases correctly" duration="5" />
</file>
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/readfile/[filename]/route.test.ts">
<testCase name="GET function returns 200 when file exists" duration="2" />
<testCase name="GET function returns 404 when file does not exist" duration="1" />
</file>
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/utils/ELO/EloRating.test.ts">
<testCase name="getUpdatedRatings should update ratings correctly when white wins" duration="2" />
<testCase name="getUpdatedRatings should update ratings correctly when black wins" duration="1" />
<testCase name="getUpdatedRatings should update ratings correctly when it is a draw" duration="1" />
<testCase name="getUpdatedRatings should update ratings correctly when the first player is a medium" duration="1" />
<testCase name="getUpdatedRatings should update ratings correctly when the first player is a pro" duration="1" />
<testCase name="getUpdatedRatings should update ratings correctly when the players have the same rating" duration="0" />
</file>
<file path="/home/alex/Documents/GitFolder/T5-omega-chess/code/omega-chess/src/app/api/healthcheck/route.test.ts">
<testCase name="GET should return a JSON response with status 200" duration="1" />
</file>
</testExecutions>